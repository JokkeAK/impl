import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.awt.*;
import java.io.IOException;
import java.util.List;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Impl Interpreter\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	implLexer lex = new implLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	implParser parser = new implParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	AST result = interpreter.visit(parseTree);
    }
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<AST> implements implVisitor<AST> {
	@Override
	public Circuit visitStart(implParser.StartContext ctx) {
		return new Circuit();
	}

	@Override
	public  AST visitSimulation(implParser.SimulationContext ctx) {
		return new Simulation(ctx.x.getText(), ctx.b.getText());
	}

	@Override
	public AST visitOutputs(implParser.OutputsContext ctx) {
		return new Outputs(ctx.x.getText());
	}

	@Override
	public AST visitLatch(implParser.LatchContext ctx) {
		return new Latch(ctx.getText());
	}

	@Override
	public AST visitAssignment(implParser.AssignmentContext ctx) {
		return new Assignment(ctx.x.getText(),(Expr) visit(ctx.e));
	}

	@Override
	public AST visitNOT(implParser.NOTContext ctx) {
		return new NOT((Expr)visit(ctx.e1));
	}

	@Override
	public AST visitIdentifier(implParser.IdentifierContext ctx) {
		return new Identifier(ctx.x.getText());
	}

	@Override
	public AST visitOR(implParser.ORContext ctx) {
		return new OR((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
	}

	@Override
	public AST visitAND(implParser.ANDContext ctx) {
		return new AND((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
	}

	@Override
	public AST visitParentheses(implParser.ParenthesesContext ctx) {
		return visit(ctx.e1);
	}

}

